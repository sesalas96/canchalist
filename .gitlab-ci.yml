stages:
  - build
  - deploy-dev
  - deploy-qa
  - deploy-stage
  - deploy-prod

variables:
  EKS_CLUSTER_NAME: cci-web-dev
  EKS_REGION: us-east-1
  DOCKER_IMAGE_REPO: 067322660699.dkr.ecr.us-east-1.amazonaws.com/cci-node-template
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BASE_TAG: cci-node-template

build:
  stage: build
  image: docker:20.10.16
  tags:
    - techtransform
  services:
    - name: docker:20.10.16-dind
      alias: docker
      command: ["--privileged", "--insecure-registry=git.ipnms.net:5050"]
  before_script:
    - apk update && apk add --no-cache curl jq python3 py3-pip unzip
    - pip3 install awscli --upgrade
    - export PATH=$HOME/.local/bin:$PATH
    - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p ~/.kube
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$EKS_REGION
    - echo "Checking AWS credentials and region "
    - aws sts get-caller-identity || (echo "AWS credentials are invalid" && exit 1)
    - echo "$AWS_DEFAULT_REGION"
    - echo "$EKS_CLUSTER_NAME"
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME || (echo "Failed to update kubeconfig" && exit 1)
    - echo "Kubeconfig file content:"
    - cat ~/.kube/config # Debugging step to check the kubeconfig file
    - echo "Available contexts:"
    - kubectl config get-contexts # Debugging step to check available contexts
  script:
    - "echo \"Tag: $DOCKER_BASE_TAG/$CI_COMMIT_REF_SLUG\""
    - docker build -t $DOCKER_BASE_TAG/$CI_COMMIT_REF_SLUG .
    - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $DOCKER_IMAGE_REPO
    - docker push $DOCKER_BASE_TAG/$CI_COMMIT_REF_SLUG
  only:
    - main

deploy-dev:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: dev
  before_script:
    - mkdir -p ~/.kube
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_DEFAULT_REGION=$EKS_REGION
    - aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME || (echo "Failed to update kubeconfig" && exit 1)
    - cat ~/.kube/config
    - kubectl config view
  script:
    - KUBE_CONTEXT=$(kubectl config get-contexts -o name | grep $EKS_CLUSTER_NAME | head -n 1)
    - echo "$KUBE_CONTEXT"
    - kubectl config use-context "$KUBE_CONTEXT" || (echo "Failed to switch context" && exit 1)
    - kubectl config set-context --current --namespace=dev
    - kubectl get nodes
    - kubectl apply -f k8s/deployment.yaml --validate=false
    - kubectl apply -f k8s/service.yaml
  only:
    - main
  when: manual
  allow_failure: false

deploy-qa:
  stage: deploy-qa
  image: bitnami/kubectl:latest
  environment:
    name: qa
  script:
    - export KUBE_CONTEXT=$(kubectl config get-contexts -o name | grep $EKS_CLUSTER_NAME)
    - echo "$KUBE_CONTEXT"
    - kubectl config use-context $KUBE_CONTEXT || (echo "Failed to switch context" && exit 1)
    - kubectl config set-context --current --namespace=qa
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  only:
    - main
  when: manual
  allow_failure: false

deploy-stage:
  stage: deploy-stage
  image: bitnami/kubectl:latest
  environment:
    name: stage
  script:
    - export KUBE_CONTEXT=$(kubectl config get-contexts -o name | grep $EKS_CLUSTER_NAME)
    - echo "$KUBE_CONTEXT"
    - kubectl config use-context $KUBE_CONTEXT || (echo "Failed to switch context" && exit 1)
    - kubectl config set-context --current --namespace=stage
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  only:
    - main
  when: manual
  allow_failure: false

deploy-prod:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
  script:
    - export KUBE_CONTEXT=$(kubectl config get-contexts -o name | grep $EKS_CLUSTER_NAME)
    - echo "$KUBE_CONTEXT"
    - kubectl config use-context $KUBE_CONTEXT || (echo "Failed to switch context" && exit 1)
    - kubectl config set-context --current --namespace=production
    - kubectl apply -f k8s/deployment.yaml
    - kubectl apply -f k8s/service.yaml
  only:
    - main
  when: manual
  allow_failure: false
