stages:
  - build
  - deploy-dev
  - monitor-dev
  - deploy-qa
  - monitor-qa
  - deploy-uat
  - monitor-uat
  - deploy-prod
  - monitor-prod

variables:
  EKS_CLUSTER_NAME: CCI_EKS_CLUSTER_NAME
  EKS_REGION: CCI_EKS_REGION
  DOCKER_IMAGE: CCI_ECR_IMAGE

before_script:
  - apt-get update && apt-get install -y curl jq python3 python3-pip
  - pip3 install awscli
  - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x ./kubectl
  - mv ./kubectl /usr/local/bin/kubectl
  - mkdir -p ~/.kube
  - aws eks --region $EKS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build --cache-from $DOCKER_IMAGE -t $DOCKER_IMAGE .
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker push $DOCKER_IMAGE
  only:
    - master

deploy-dev:
  stage: deploy-dev
  image: bitnami/kubectl:latest
  environment:
    name: dev
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=dev
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
  only:
    - master
  when: manual
  allow_failure: false

monitor-dev:
  stage: monitor-dev
  image: bitnami/kubectl:latest
  environment:
    name: dev
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=dev
      kubectl port-forward svc/prometheus-server 9090:80 &
      sleep 5 # Wait for port-forward to establish
      curl -X POST -H "Content-Type: application/json" -d '{"targets": ["localhost:9090"]}' http://localhost:9090/api/v1/targets
  only:
    - master
  when: manual
  allow_failure: false

deploy-qa:
  stage: deploy-qa
  image: bitnami/kubectl:latest
  environment:
    name: qa
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=qa
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
  only:
    - master
  when: manual
  allow_failure: false

monitor-qa:
  stage: monitor-qa
  image: bitnami/kubectl:latest
  environment:
    name: qa
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=qa
      kubectl port-forward svc/prometheus-server 9090:80 &
      sleep 5 # Wait for port-forward to establish
      curl -X POST -H "Content-Type: application/json" -d '{"targets": ["localhost:9090"]}' http://localhost:9090/api/v1/targets
  only:
    - master
  when: manual
  allow_failure: false

deploy-uat:
  stage: deploy-uat
  image: bitnami/kubectl:latest
  environment:
    name: uat
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=uat
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
  only:
    - master
  when: manual
  allow_failure: false

monitor-uat:
  stage: monitor-uat
  image: bitnami/kubectl:latest
  environment:
    name: uat
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=uat
      kubectl port-forward svc/prometheus-server 9090:80 &
      sleep 5 # Wait for port-forward to establish
      curl -X POST -H "Content-Type: application/json" -d '{"targets": ["localhost:9090"]}' http://localhost:9090/api/v1/targets
  only:
    - master
  when: manual
  allow_failure: false

deploy-prod:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=production
      kubectl apply -f k8s/deployment.yaml
      kubectl apply -f k8s/service.yaml
  only:
    - master
  when: manual
  allow_failure: false

monitor-prod:
  stage: monitor-prod
  image: bitnami/kubectl:latest
  environment:
    name: production
  script:
    - |
      kubectl config use-context $EKS_CLUSTER_NAME
      kubectl config set-context --current --namespace=production
      kubectl port-forward svc/prometheus-server 9090:80 &
      sleep 5 # Wait for port-forward to establish
      curl -X POST -H "Content-Type: application/json" -d '{"targets": ["localhost:9090"]}' http://localhost:9090/api/v1/targets
  only:
    - master
  when: manual
  allow_failure: false

logs:
  stage: deploy-prod
  image: bitnami/kubectl:latest
  script:
    - kubectl logs -l app=my-app --since=1h
  when: always
  allow_failure: true
